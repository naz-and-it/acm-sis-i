347. Top K Frequent Elements
LeetCode: https://leetcode.com/problems/top-k-frequent-elements/

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        ArrayList<Integer> [] list;
        ArrayList<Integer> result = new ArrayList<>();
        HashMap<Integer, Integer> map = new HashMap<>();
        int [] answer = new int [k];
        int maxFrequent = 0;
        
        for (int a : nums) {
            int frequent = map.getOrDefault(a, 0) + 1;
            map.put(a, frequent);
            maxFrequent = Math.max(maxFrequent, frequent);
        }
        
        list = new ArrayList[maxFrequent + 1];
        
        for (int key : map.keySet()) {
            int frequent = map.get(key);
            
            if (list[frequent] == null)
                list[frequent] = new ArrayList<>();
            
            list[frequent].add(key);
        }
        
        
        for(int i = list.length - 1; i >= 0 && k > result.size(); --i) {
            if (list[i] != null)
                result.addAll(list[i]);
        }
        
        for(int i = 0; i < result.size() && k > 0; i++, --k) {
            answer[i] = result.get(i);
        }
        
        return answer;
    }
}
