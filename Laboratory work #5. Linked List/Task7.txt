234. Palindrome Linked List
LeetCode: https://leetcode.com/problems/palindrome-linked-list/


class Solution {
public:
    ListNode *reverseLinkedList(ListNode *head) {
        
        ListNode *current = head, *prev = NULL, *next = NULL;
        
        while(true) {
            prev = current->next;
            current->next = next;
            next = current;
            
            if(prev != NULL)
                current = prev;
            else
                break;
        }
        return current;
    }
    
    int getLength(ListNode *head) {
        int count = 0;
        
        while (head != NULL) {
            count++;
            head = head->next;
        }
        
        return count;
    }
    
    bool isPalindrome(ListNode* head) {
        if(head == NULL || head->next == NULL)
            return true;
        
        int count = getLength(head);
        
        ListNode *current = head;
        
        int i = 1;
        
        while(i < (count + 1) / 2 + 1) {
            i++;
            current = current->next;
        }
        
        ListNode *l = head;
        ListNode *r = reverseLinkedList(current);
        
        i = 1;
        
        while(i <= count / 2) {
            if (l->val != r->val)
                return false;
            
            l = l->next;
            r = r->next;
            i++;
        }
        return true;
    }
};


